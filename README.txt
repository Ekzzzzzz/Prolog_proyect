Sistema de Asignaci√≥n Acad√©mica Automatizado
üéì Descripci√≥n
Sistema automatizado para la asignaci√≥n de cursos acad√©micos que utiliza Prolog como motor l√≥gico de backtracking y Node.js para la interfaz web. El sistema resuelve autom√°ticamente la asignaci√≥n de cursos a profesores, horarios y aulas sin intervenci√≥n manual del usuario.
üöÄ Caracter√≠sticas

Asignaci√≥n autom√°tica: Utiliza backtracking en Prolog para resolver asignaciones
Detecci√≥n de conflictos: Identifica autom√°ticamente conflictos de horarios, profesores y aulas
Interfaz web moderna: Panel de control para coordinadores acad√©micos
Validaci√≥n completa: Verifica que se cumplan todas las restricciones acad√©micas
Sin base de datos: Todos los datos est√°n definidos como hechos en Prolog

üìã Prerrequisitos
Software requerido:

Node.js (v14 o superior)
SWI-Prolog (v8.0 o superior)
npm (incluido con Node.js)

Instalaci√≥n de SWI-Prolog:
Windows:
bash# Descargar desde: https://www.swi-prolog.org/download/stable
# Instalar el archivo .exe descargado
macOS:
bash# Usar Homebrew
brew install swi-prolog
Linux (Ubuntu/Debian):
bashsudo apt-get update
sudo apt-get install swi-prolog
Linux (CentOS/RHEL):
bashsudo yum install pl
üõ†Ô∏è Instalaci√≥n
1. Clonar/Descargar el proyecto
bash# Si tienes git instalado
git clone <repository-url>
cd sistema-asignacion-academica

# O descargar y extraer los archivos manualmente
2. Instalar dependencias de Node.js
bashnpm install
3. Verificar instalaci√≥n de Prolog
bashswipl --version
4. Estructura de archivos requerida
sistema-asignacion-academica/
‚îú‚îÄ‚îÄ server.js                 # Servidor Node.js
‚îú‚îÄ‚îÄ academic_system.pl        # L√≥gica Prolog
‚îú‚îÄ‚îÄ package.json             # Configuraci√≥n npm
‚îú‚îÄ‚îÄ public/
‚îÇ   ‚îî‚îÄ‚îÄ index.html           # Interfaz web
‚îî‚îÄ‚îÄ README.md               # Este archivo
üöÄ Ejecuci√≥n
Iniciar el servidor:
bashnpm start
Para desarrollo (con auto-reload):
bashnpm run dev
Acceder a la interfaz:
Abrir navegador en: http://localhost:3000
üìä Uso del Sistema
Como Coordinador Acad√©mico:

Abrir la interfaz web en http://localhost:3000
Presionar "Generar Cronograma Autom√°tico"

El sistema ejecutar√° autom√°ticamente la l√≥gica Prolog
Resolver√° todas las asignaciones usando backtracking
Mostrar√° el cronograma generado


Revisar los resultados:

‚úÖ Cronograma v√°lido: Sin conflictos detectados
‚ùå Cronograma inv√°lido: Con conflictos que requieren atenci√≥n


Consultar estad√≠sticas del sistema
Exportar o imprimir el cronograma generado

Funcionalidades disponibles:

Visualizaci√≥n del cronograma: Tabla con todas las asignaciones
Detecci√≥n de conflictos: Lista de conflictos encontrados
Estad√≠sticas del sistema: M√©tricas del cronograma generado
Consultas espec√≠ficas: Por profesor, aula o horario

üîß Configuraci√≥n
Modificar datos del sistema:
Editar el archivo academic_system.pl para cambiar:
prolog% Agregar nuevos profesores
profesor(nuevo_profesor).

% Agregar nuevos cursos
curso(nuevo_curso, tipo, semestre).

% Agregar nuevas aulas
aula(nueva_aula, tipo_aula).

% Agregar disponibilidad
disponible(profesor, horario).
Cambiar semestre activo:
prolog% Cambiar el semestre que se procesar√°
semestre_activo(2).  % Cambiar de 1 a 2, etc.
üß™ Pruebas y Validaci√≥n
Verificar que Prolog funciona:
bashswipl -q -t "write('Prolog funcionando correctamente'), nl, halt."
Probar la l√≥gica directamente:
bashswipl academic_system.pl
En la consola de Prolog:
prolog?- ejecutar_sistema.
Verificar la comunicaci√≥n Node.js - Prolog:
bash# Iniciar el servidor
npm start

# En otro terminal, probar la API
curl http://localhost:3000/api/info
üìà API Endpoints
Endpoints disponibles:

GET / - Interfaz web principal
POST /api/generar-cronograma - Generar cronograma autom√°tico
GET /api/estadisticas - Obtener estad√≠sticas del sistema
GET /api/profesor/:nombre - Consultar asignaciones de un profesor
GET /api/aula/:nombre - Consultar ocupaci√≥n de un aula
GET /api/info - Informaci√≥n del sistema

üîç Resoluci√≥n de Problemas
Error: "swipl: command not found"
bash# Verificar que SWI-Prolog est√© instalado
which swipl

# Si no est√° instalado, instalarlo seg√∫n el OS
Error: "No se pudo generar cronograma"

Verificar que academic_system.pl est√© en el directorio ra√≠z
Comprobar que la sintaxis Prolog sea correcta
Verificar que haya suficientes recursos (profesores, aulas, horarios)

Error: "ENOENT: no such file or directory"
bash# Verificar que todos los archivos est√©n presentes
ls -la academic_system.pl server.js package.json
Puerto ya en uso:
bash# Cambiar el puerto en server.js
const PORT = 3001; // Cambiar de 3000 a 3001
üèóÔ∏è Arquitectura del Sistema
Componentes principales:

Motor Prolog (academic_system.pl):

Hechos del sistema (profesores, cursos, aulas)
Reglas de asignaci√≥n
Algoritmo de backtracking
Detecci√≥n de conflictos


Servidor Node.js (server.js):

API REST
Comunicaci√≥n con Prolog via child_process
Procesamiento de resultados
Servicio de archivos est√°ticos


Interfaz Web (public/index.html):

Panel de control para coordinadores
Visualizaci√≥n de cronogramas
Manejo de estados del sistema
Exportaci√≥n de resultados



Flujo de ejecuci√≥n:

Coordinador presiona "Generar Cronograma"
Node.js ejecuta el archivo Prolog
Prolog resuelve las asignaciones usando backtracking
Node.js procesa la salida de Prolog
Interfaz muestra los resultados al coordinador

üìù Reglas del Sistema
Restricciones implementadas:

Un profesor no puede estar en dos lugares a la vez
Un aula no puede tener dos clases simult√°neas
Los cursos de laboratorio solo van a laboratorios
Un profesor no puede dictar el mismo curso dos veces
Todos los cursos del semestre deben ser asignados

Detecci√≥n de conflictos:

Conflicto de profesor: Asignado a m√∫ltiples cursos en el mismo horario
Conflicto de aula: Ocupada por m√∫ltiples cursos simult√°neamente
Conflicto de curso: Profesor dicta el mismo curso m√°s de una vez

ü§ù Contribuciones
Para contribuir al proyecto:

Fork el repositorio
Crear una rama para tu feature (git checkout -b feature/nueva-funcionalidad)
Commit tus cambios (git commit -am 'Agregar nueva funcionalidad')
Push a la rama (git push origin feature/nueva-funcionalidad)
Crear un Pull Request

üìÑ Licencia
Este proyecto est√° bajo la Licencia MIT - ver el archivo LICENSE para m√°s detalles.
üÜò Soporte
Para reportar problemas o solicitar ayuda:

Crear un issue en GitHub
Incluir informaci√≥n del sistema (OS, versi√≥n de Node.js, versi√≥n de SWI-Prolog)
Proporcionar logs de error completos
Describir los pasos para reproducir el problema

üîÆ Pr√≥ximas Funcionalidades

 Soporte para m√∫ltiples semestres simult√°neos
 Interfaz para modificar datos sin editar Prolog
 Exportaci√≥n a PDF y Excel
 Optimizaci√≥n de asignaciones por preferencias
 Historial de cronogramas generados
 Notificaciones por email para coordinadores


Sistema de Asignaci√≥n Acad√©mica Automatizado - Demostrando la integraci√≥n efectiva entre Prolog y Node.js para resolver problemas complejos de planificaci√≥n acad√©mica.