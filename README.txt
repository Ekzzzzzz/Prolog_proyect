Sistema de Coordinaci√≥n Acad√©mica
Un sistema inteligente para la asignaci√≥n autom√°tica de horarios acad√©micos que integra Prolog como motor de inferencia con Node.js para la interfaz web.
üéØ Caracter√≠sticas Principales

Motor de Inferencia Prolog: Utiliza backtracking para resolver conflictos de horarios autom√°ticamente
Interfaz Web Intuitiva: Panel de control moderno para coordinadores acad√©micos
Asignaci√≥n Inteligente: Evita conflictos de horarios, aulas y docentes
Validaci√≥n en Tiempo Real: Verifica disponibilidad y competencias antes de asignar
Generaci√≥n Autom√°tica: Crea horarios completos optimizados

üèóÔ∏è Arquitectura del Sistema
Componentes Principales

Backend Prolog (academic_system.pl)

Hechos: Docentes, cursos, aulas, laboratorios, disponibilidad
Reglas: L√≥gica para evitar conflictos y validar asignaciones
Predicados: Interfaz de comunicaci√≥n con Node.js


Servidor Node.js (server.js)

API RESTful para comunicaci√≥n con el frontend
Interfaz con Prolog mediante procesos del sistema
Manejo de errores y validaci√≥n de datos


Frontend Web (index.html)

Interfaz moderna y responsiva
Comunicaci√≥n as√≠ncrona con el backend
Visualizaci√≥n de horarios y resultados



üß† L√≥gica de Prolog Explicada
Hechos Base
prolog% Docentes con sus especialidades
docente(d001, 'Dr. Carlos Mendoza', sistemas).

% Cursos con informaci√≥n completa
curso(mat101, 'Matematica I', 4, 1, aula, 28).

% Disponibilidad de docentes
disponible(d001, lunes, bloque_1).

% Infraestructura disponible
aula(a101, 30).
laboratorio(lab_sistemas, 25, computacion).
Reglas Cr√≠ticas
1. Evitar Conflictos de Docentes
prologno_conflicto_docente(Docente, Dia, Bloque) :-
    \+ (asignacion(_, Docente, Dia, Bloque, _, _),
        asignacion(_, Docente, Dia, Bloque, _, _)).
2. Evitar Conflictos de Ambientes
prologno_conflicto_ambiente(Ambiente, Dia, Bloque) :-
    \+ (asignacion(_, _, Dia, Bloque, Ambiente, _),
        asignacion(_, _, Dia, Bloque, Ambiente, _)).
3. Validar Competencias
prologdocente_competente(Docente, Curso) :-
    docente(Docente, _, Especialidad),
    requiere_competencia(Curso, Especialidad).
4. Verificar Capacidades
prologcapacidad_suficiente(Curso, Ambiente) :-
    curso(Curso, _, _, _, aula, EstudiantesEstimados),
    aula(Ambiente, Capacidad),
    EstudiantesEstimados =< Capacidad.
Predicado Principal de Asignaci√≥n
prologasignar_curso(Curso, Docente, Dia, Bloque, Ambiente, Semestre) :-
    % Verificaciones secuenciales con backtracking
    curso(Curso, _, _, SemestreCurso, _, _),
    Semestre = SemestreCurso,
    disponible(Docente, Dia, Bloque),
    docente_competente(Docente, Curso),
    ambiente_correcto(Curso, Ambiente),
    capacidad_suficiente(Curso, Ambiente),
    no_conflicto_docente(Docente, Dia, Bloque),
    no_conflicto_ambiente(Ambiente, Dia, Bloque).
üîß Integraci√≥n T√©cnica
Comunicaci√≥n Prolog-Node.js
La comunicaci√≥n se realiza mediante:

Ejecuci√≥n de Procesos: Node.js lanza procesos SWI-Prolog
Archivos Temporales: Consultas din√°micas via archivos .pl
Parsing de Resultados: Conversi√≥n de respuestas Prolog a JSON

javascriptasync consultarProlog(consulta) {
    const tempFile = 'temp_query.pl';
    const queryContent = `
        :- consult('academic_system.pl').
        :- ${consulta}, write_canonical(Result), nl, halt.
    `;
    
    fs.writeFileSync(tempFile, queryContent);
    const queryProcess = spawn('swipl', ['-q', '-t', 'halt', '-s', tempFile]);
    // ... manejo de respuesta
}
API RESTful

GET /api/docentes - Obtener lista de docentes
GET /api/cursos - Obtener lista de cursos
GET /api/ambientes - Obtener ambientes disponibles
GET /api/disponibilidad/:docente - Consultar disponibilidad
POST /api/asignar - Validar asignaci√≥n manual
GET /api/generar-horario - Generar horario completo

üìã Prerrequisitos

Node.js (v16 o superior)
SWI-Prolog (v8.0 o superior)
npm o yarn

üöÄ Instalaci√≥n y Configuraci√≥n

Clonar el repositorio

bashgit clone [url-del-repositorio]
cd sistema-coordinacion-academica

Instalar dependencias

bashnpm install

Instalar SWI-Prolog

bash# Ubuntu/Debian
sudo apt-get install swi-prolog

# macOS
brew install swi-prolog

# Windows
# Descargar desde https://www.swi-prolog.org/download/stable

Crear archivos necesarios

bash# Crear archivo Prolog
touch academic_system.pl

# Crear directorio p√∫blico
mkdir public

Configurar archivos


Copiar el contenido de academic_system.pl al archivo
Copiar el contenido de index.html a public/index.html
Copiar el contenido de server.js al archivo principal

üèÉ‚Äç‚ôÇÔ∏è Ejecuci√≥n
bash# Modo desarrollo
npm run dev

# Modo producci√≥n
npm start
El sistema estar√° disponible en http://localhost:3000
üí° Decisiones de Dise√±o
¬øPor qu√© Prolog?

Backtracking Natural: Ideal para resolver problemas de satisfacci√≥n de restricciones
L√≥gica Declarativa: Permite expresar reglas de negocio de forma natural
Flexibilidad: F√°cil modificaci√≥n de reglas sin cambiar el c√≥digo base
Eficiencia: Optimizaci√≥n autom√°tica de b√∫squedas y resoluci√≥n

¬øPor qu√© Node.js?

Integraci√≥n Sencilla: F√°cil comunicaci√≥n con procesos del sistema
Ecosistema Rico: Amplia variedad de librer√≠as y herramientas
Performance: Excelente para aplicaciones I/O intensivas
Desarrollo R√°pido: Prototipado y despliegue √°gil

Arquitectura Sin Base de Datos

Simplicidad: Menos componentes = menos complejidad
Portabilidad: F√°cil despliegue en diferentes entornos
Foco en L√≥gica: Concentraci√≥n en algoritmos de asignaci√≥n
Prototipado R√°pido: Desarrollo y pruebas aceleradas

üéõÔ∏è Uso del Sistema
Panel de Coordinador

Asignaci√≥n Manual

Seleccionar curso, docente, horario y ambiente
Validaci√≥n autom√°tica de conflictos
Feedback inmediato sobre viabilidad


Generaci√≥n Autom√°tica

Crear horarios completos optimizados
Resoluci√≥n autom√°tica de conflictos
Visualizaci√≥n en formato tabla


Consulta de Disponibilidad

Ver horarios disponibles por docente
Planificaci√≥n de asignaciones futuras



Reglas de Validaci√≥n

‚úÖ Un docente no puede tener dos clases simult√°neas
‚úÖ Un ambiente no puede ser usado por dos cursos a la vez
‚úÖ Los docentes deben tener competencias para el curso
‚úÖ La capacidad del ambiente debe ser suficiente
‚úÖ Los laboratorios deben ser del tipo correcto

üîç Algoritmo de Backtracking
El sistema utiliza el backtracking natural de Prolog para:

Explorar Espacios de Soluci√≥n: Probar todas las combinaciones posibles
Detectar Conflictos: Retroceder cuando encuentra restricciones violadas
Optimizar Asignaciones: Encontrar la mejor distribuci√≥n de recursos
Garantizar Consistencia: Asegurar que todas las reglas se cumplan

üìä Beneficios del Sistema

Automatizaci√≥n: Reduce trabajo manual del coordinador
Optimizaci√≥n: Maximiza uso de recursos disponibles
Flexibilidad: F√°cil adaptaci√≥n a cambios en requisitos
Confiabilidad: Elimina errores humanos en asignaciones
Escalabilidad: Maneja crecimiento en cursos y docentes

üõ†Ô∏è Extensiones Futuras

Integraci√≥n con sistemas de gesti√≥n acad√©mica
Algoritmos gen√©ticos para optimizaci√≥n avanzada
Interfaz m√≥vil para coordinadores
Reportes y an√°l
